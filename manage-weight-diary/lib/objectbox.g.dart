// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'entity/diary.dart';
import 'entity/setting.dart';
import 'entity/weight.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7512764271467971137),
      name: 'Weight',
      lastPropertyId: const IdUid(4, 3846747093762081916),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2608657122915554385),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2455890597056140781),
            name: 'date',
            type: 9,
            flags: 34848,
            indexId: const IdUid(1, 703411762478528807)),
        ModelProperty(
            id: const IdUid(3, 2242782066616598009),
            name: 'weight',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3846747093762081916),
            name: 'datetime',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 4345521118286931425),
      name: 'Diary',
      lastPropertyId: const IdUid(4, 9190000944083355807),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8984456133081480441),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5861739824587567191),
            name: 'writingDate',
            type: 9,
            flags: 34848,
            indexId: const IdUid(3, 8091290611191099597)),
        ModelProperty(
            id: const IdUid(3, 8984613699679011068),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9190000944083355807),
            name: 'datetime',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 2140158017906412823),
      name: 'Setting',
      lastPropertyId: const IdUid(3, 2547842282810294448),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7298743819766333153),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1828095468441982579),
            name: 'ruleId',
            type: 9,
            flags: 34848,
            indexId: const IdUid(4, 6230421970312916886)),
        ModelProperty(
            id: const IdUid(3, 2547842282810294448),
            name: 'ruleVal',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(6, 7823824433616586941),
      lastIndexId: const IdUid(7, 5308752989585021852),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        736869478995763874,
        3463167279790625995,
        7823824433616586941
      ],
      retiredIndexUids: const [6940277428261568347],
      retiredPropertyUids: const [
        1254470922026785973,
        1605299603828377963,
        4853814204607557725,
        8102198046236296069,
        1473614072657737246,
        598947756881918845
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Weight: EntityDefinition<Weight>(
        model: _entities[0],
        toOneRelations: (Weight object) => [],
        toManyRelations: (Weight object) => {},
        getId: (Weight object) => object.id,
        setId: (Weight object, int id) {
          object.id = id;
        },
        objectToFB: (Weight object, fb.Builder fbb) {
          final dateOffset = fbb.writeString(object.date);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, dateOffset);
          fbb.addFloat64(2, object.weight);
          fbb.addInt64(3, object.datetime.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Weight(
              date: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              weight:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0),
              datetime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Diary: EntityDefinition<Diary>(
        model: _entities[1],
        toOneRelations: (Diary object) => [],
        toManyRelations: (Diary object) => {},
        getId: (Diary object) => object.id,
        setId: (Diary object, int id) {
          object.id = id;
        },
        objectToFB: (Diary object, fb.Builder fbb) {
          final writingDateOffset = fbb.writeString(object.writingDate);
          final contentOffset = fbb.writeString(object.content);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, writingDateOffset);
          fbb.addOffset(2, contentOffset);
          fbb.addInt64(3, object.datetime.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Diary(
              writingDate: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              content: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              datetime: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Setting: EntityDefinition<Setting>(
        model: _entities[2],
        toOneRelations: (Setting object) => [],
        toManyRelations: (Setting object) => {},
        getId: (Setting object) => object.id,
        setId: (Setting object, int id) {
          object.id = id;
        },
        objectToFB: (Setting object, fb.Builder fbb) {
          final ruleIdOffset = fbb.writeString(object.ruleId);
          final ruleValOffset = fbb.writeString(object.ruleVal);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, ruleIdOffset);
          fbb.addOffset(2, ruleValOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Setting(
              ruleId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              ruleVal: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Weight] entity fields to define ObjectBox queries.
class Weight_ {
  /// see [Weight.id]
  static final id = QueryIntegerProperty<Weight>(_entities[0].properties[0]);

  /// see [Weight.date]
  static final date = QueryStringProperty<Weight>(_entities[0].properties[1]);

  /// see [Weight.weight]
  static final weight = QueryDoubleProperty<Weight>(_entities[0].properties[2]);

  /// see [Weight.datetime]
  static final datetime =
      QueryIntegerProperty<Weight>(_entities[0].properties[3]);
}

/// [Diary] entity fields to define ObjectBox queries.
class Diary_ {
  /// see [Diary.id]
  static final id = QueryIntegerProperty<Diary>(_entities[1].properties[0]);

  /// see [Diary.writingDate]
  static final writingDate =
      QueryStringProperty<Diary>(_entities[1].properties[1]);

  /// see [Diary.content]
  static final content = QueryStringProperty<Diary>(_entities[1].properties[2]);

  /// see [Diary.datetime]
  static final datetime =
      QueryIntegerProperty<Diary>(_entities[1].properties[3]);
}

/// [Setting] entity fields to define ObjectBox queries.
class Setting_ {
  /// see [Setting.id]
  static final id = QueryIntegerProperty<Setting>(_entities[2].properties[0]);

  /// see [Setting.ruleId]
  static final ruleId =
      QueryStringProperty<Setting>(_entities[2].properties[1]);

  /// see [Setting.ruleVal]
  static final ruleVal =
      QueryStringProperty<Setting>(_entities[2].properties[2]);
}
